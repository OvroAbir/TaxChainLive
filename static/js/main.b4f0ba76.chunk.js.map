{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","redux/modules/czAppDuck.js","redux/store.js","utils/getWeb3.js","utils/initBlockchain.js","common/contractMethods.js","pages/register.js","common/commonMethods.js","pages/employee.js","components/employeePopup.js","components/employeecard.js","components/employercard.js","components/changeTaxRate.js","components/addIrsAdd.js","pages/irs.js","pages/employer.js","components/menu.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","initialState","web3Instance","taxChainContract","userAddress","userType","loggerMiddleware","createLogger","store","createStore","state","action","type","Object","assign","payload","applyMiddleware","thunkMiddleware","web3Initialized","results","getWeb3","Promise","reject","window","addEventListener","a","ethereum","web3","Web3","enable","dispatch","console","log","provider","providers","HttpProvider","blockchainInitialized","data","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","TaxChainContract","networks","instance","Contract","abi","address","initBlockchain","msgSenderAddress","methods","getMessageSenderAddressType","call","from","res","registerEmployee","send","registerEmployer","month","year","getSalaryAmountsForEmployeeAndMonthAndYear","getEmployeeTotalIncomeAYear","getTaxRate","getEmployerIdsForEmployeeAndMonthAndYear","employeeAddress","employerAddress","employeeAcceptEmployer","getAllEmployeeList","getAllEmployerList","getAllEmployeeTotalIncomeListAYear","newTaxRate","changeTaxRate","amount","addEmployeeSalary","irsAccount","registerIRS","getMessageSenderType","registerNewUser","getAllEmployee","getAllEmployer","getAllEmployeeTotalIncomeList","changeIRSTaxRate","registerIrsAccount","Register","selectedType","registerMessageVisible","errorMessage","doButtonLoading","allSalaries","allEmployeeIds","employeeTaxTableBody","allSalaryLoadingFinished","taxRate","totalTax","salaryYear","handleRadioChange","value","setState","handleRegisterMessageDismiss","getSuccessfulRegistrationMessage","Message","success","icon","header","content","size","getFailedRegistrationMessage","err","negative","message","handleSubmit","props","setTimeout","location","reload","getRegistrationPane","registerMessage","warning","color","onDismiss","registrationPaneContent","Grid","centered","columns","Row","Form","onSubmit","Field","Radio","label","name","checked","onChange","Button","animated","loading","Content","visible","hidden","Icon","fitted","menuItem","render","Tab","Pane","getYearOptions","yearOptions","y","push","key","text","getAllEmployeeTaxHeader","Table","Header","HeaderCell","textAlign","getAllEmployeeTaxBody","rows","index","length","getOneEmployeeTaxBody","Cell","calculateTax","salary","changeYear","event","taxRate_","allSalary","map","Number","totalCollectedTax","reduce","b","employeeIds","getTotalTaxPane","body","totalTaxPaneContent","Segment","Dropdown","placeholder","fluid","selection","options","Statistic","Group","widths","Value","Label","compact","selectable","Body","Dimmer","active","inverted","Loader","Image","src","allPanes","this","panes","renderActiveOnly","Component","connect","getFailedMessage","Employee","monthlySalaries","employersIds","totalSalary","incomeTaxRate","loadingFinished","acceptEmployerMessage","showAcceptEmployerMessage","doAcceptButtonLoading","submittedEmployerAddressToAccept","errorHappendedToAcceptEmployer","newSalaryModalOpen","newSalaryAmount","newSalaryMonth","newSalaryYear","newSalaryEmployerId","salaryYearSet","downloadData","setEmployerIds","setTotalSalary","setMonthlySalaryAmounts","setTotalTax","listenSalaryAddedEvent","allResults","result","getTableHeader","getMonthNameFromNumber","monthNum","getTableRow","employerId","getTableBody","bodies","employerIds","undefined","emplr","getTableFooter","Footer","income","getSalaryPan","footer","paneContent","handleAcceptEmployerAddressValue","handleAcceptEmployerSubmit","getEmployerAcceptPan","employerPaneContent","Input","required","salaryAddedEvent","employeeId","returnValues","addNewSalaryAfterEvent","monthlySalariesVar","employersIdsVar","closeSalaryReceivedModal","getSalaryRecievedPopUp","Modal","open","onClose","basic","Actions","onClick","events","SalaryAdded","EmployeePopup","date","Date","className","style","display","justifyContent","alignItems","eight","width","wrapped","ui","employeeInfo","employeeAddr","annualTax","Math","round","currentMonthlyTax","getMonth","employeeTaxRate","EmployeeCard","addr","employeeSalary","Card","fontSize","Meta","class","Description","trigger","modal","closeOnDocumentClick","EmployerCard","employerAddr","preventDefault","error","target","primary","IRS","employee","employer","salaries","false","totalEmployers","totalEmployees","totalIncomeTax","totalSalaries","tabIndex","setTotalIncomeTax","setTaxRate","reducer","accumulator","currentValue","getOverviewPane","OverviewPane","getEmployersPane","employerPane","Column","getEmployeesPane","employeesPane","getChangeTaxRatePane","ChangeTaxRatePane","getAddIRSAddrPane","AddIRSAddrPane","employerListResult","monthSelection","Employer","salaryAmount","salaryMonth","bottomMsgHidden","reInintForm","handleMonthDropDown","handleYearDropDown","inline","Select","labelPosition","MenuBar","Menu","fixed","Container","Item","as","marginRight","App","msgSenderType","contractInstance","componentDidMount","alert","page","marginTop","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b4f0ba76.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 540;","//\r\n//      This is the REDUX \"duck\" format file.\r\n//\r\n//      This file contains all the constants, reducers, and action creators in one file\r\n//      rather than spread them out among multiple directories and files.\r\n//\r\n\r\n// Action Types\r\n\r\n// Types are listened for within the reducer switch whenever an action is fired off.\r\n// The action is sent to the reducer with a type, and when that type matches the type within the a case of the switch,\r\n// some sort of data manipulation is fired off.\r\n//\r\n// They are defined as all upper-case constants and may be exported if needed elsewhere.\r\n\r\nexport const WEB3_INITIALIZED = \"WEB3_INITIALIZED\";\r\nexport const BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\";\r\nexport const UPDATE_CONTRACT_INSTANT = \"UPDATE_CONTRACT_INSTANT\";\r\nexport const UPDATE_USER_ADDRESS = \"UPDATE_USER_ADDRESS\";\r\nexport const UPDATE_USER_TYPE = \"UPDATE_USER_TYPE\";\r\n\r\n//  Actions and Action Creator Functions\r\n//\r\n// Actions are simple javascript objects that at least contain a type, and may also contain data that can be sent to the reducer.\r\n// When the user clicks on something that has an effect on the state of an app, an action creator sends an action to the reducer\r\n// where the data manipulation happens.\r\n//\r\n// An action typically looks like this:   { type: ADD_ITEM, item: 'Adding this item' }\r\n//\r\n// Action creators are the functions that create actions and send them to the reducer.\r\n// They usually return an action, sometimes can dispatch multiple actions (with the help of middleware like thunk),\r\n// or can begin asynchronous events like API calls.\r\n\r\nexport function web3Initialized(results) {\r\n  return {\r\n    type: WEB3_INITIALIZED,\r\n    payload: results\r\n  };\r\n}\r\n\r\nexport function blockchainInitialized(data) {\r\n  return {\r\n    type: BLOCKCHAIN_INITIALIZED,\r\n    payload: data\r\n  };\r\n}\r\n\r\n//\r\n//  define the initial state for the store\r\n//\r\n\r\nconst initialState = {\r\n  web3Instance: null,\r\n  taxChainContract: {}, // contract instance with methods, etc.\r\n  userAddress: \"\",\r\n  userType: \"NONE\",\r\n  // userZombieCount: 0,\r\n  // totalZombieCount: 0\r\n};\r\n\r\n// Reducers\r\n//\r\n// The reducer is typically the only thing that touches the store.\r\n// It only deals within a particular part of the store, initialized as initialState.\r\n// It's a pure switch statement that does not directly change the state because state is immutable.\r\n// That means you cannot use a method like .pop or .push that manipulates the array it's called on.\r\n// Instead we create a now store from the old store and any information we want to put in to it.\r\n// All reducers have a default case that just returns state.\r\n//\r\n// In this case, note that it is the default export.\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n    case WEB3_INITIALIZED:\r\n      // console.log(\"Web3 is initializing\", action.payload.results);\r\n      return Object.assign({}, state, {\r\n        web3Instance: action.payload.web3Instance\r\n      });\r\n\r\n    case BLOCKCHAIN_INITIALIZED:\r\n      return Object.assign({}, state, {\r\n        taxChainContract: action.payload.taxChainContract,\r\n        userAddress: action.payload.userAddress,\r\n        // userZombieCount: action.payload.userZombieCount\r\n      });\r\n    case UPDATE_CONTRACT_INSTANT:\r\n      return Object.assign({}, state, {\r\n        taxChainContract: action.payload.taxChainContract,\r\n      });\r\n    case UPDATE_USER_ADDRESS:\r\n      return Object.assign({}, state, {\r\n        userAddress: action.payload.userAddress,\r\n      });\r\n    case UPDATE_USER_TYPE:\r\n      return Object.assign({}, state, {\r\n        userType: action.payload.userType,\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport reducer from \"./modules/czAppDuck\";\r\n\r\nconst loggerMiddleware = createLogger(); // initialize logger\r\n\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware,loggerMiddleware));\r\nexport default store;\r\n","import Web3 from \"web3\";\r\nimport store from \"../redux/store\";\r\n\r\n//import web3Initialized from \"../redux/modules/czAppDuck\";  // for some unknown reason, the duck doesn't work!\r\n// so use this action type and creator instead\r\n\r\nconst WEB3_INITIALIZED = 'WEB3_INITIALIZED'; // action type\r\n\r\n// action creator\r\nfunction web3Initialized(results) {\r\n  //console.log(\"action creator\", results);\r\n   return {\r\n        type: WEB3_INITIALIZED,\r\n        payload: results\r\n    }\r\n}\r\n\r\n//  This module resolves metamask (or other provider) to set up the web3 instance in redux store\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    var results;\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n        results = {\r\n          web3Instance: web3\r\n        };\r\n        //console.log(\"Injected web3 detected.\", results);\r\n        resolve(store.dispatch(web3Initialized(results))); // redux action creator\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n        results = {\r\n          web3Instance: web3\r\n        };\r\n        console.log(\"legacy Injected web3 detected.\");\r\n        resolve(store.dispatch(web3Initialized(results))); // redux action creator\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:7545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        resolve(web3);\r\n        results = {\r\n          web3Instance: web3\r\n        };\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(store.dispatch(web3Initialized(results))); // redux action creator\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import TaxChainContract from \"../contracts_ABI/TaxChain.json\";//This is going to fail. See instructions in the next line\r\n//Windows user open cmd as admin and use this command \"mklink /D contracts_ABI ..\\..\\Contracts\\build\\contracts\"\r\nimport store from \"../redux/store\";\r\n\r\n//import blockchainInitialized from \"../redux/modules/czAppDuck\";  // for some unknown reason, the duck doesn't work!\r\n// so use this action type and creator instead\r\n\r\nexport const BLOCKCHAIN_INITIALIZED = \"BLOCKCHAIN_INITIALIZED\"; // action type\r\n\r\n// action creator (dispatch sends this to redux reducer)\r\nfunction blockchainInitialized(data) {\r\n  return {\r\n    type: BLOCKCHAIN_INITIALIZED,\r\n    payload: data\r\n  };\r\n}\r\n\r\n//\r\n//  set up the blockchain shadow contract, user address, and user zombie count.  Put into redux store.\r\n//\r\n\r\nasync function initBlockchain(web3) {\r\n  // Use web3 to get the user's accounts.\r\n  const accounts = await web3.eth.getAccounts();\r\n  const userAddress = accounts[0];\r\n\r\n  // Get contract instance\r\n  const networkId = await web3.eth.net.getId();\r\n  const deployedNetwork = TaxChainContract.networks[networkId];\r\n  const instance = new web3.eth.Contract(\r\n    TaxChainContract.abi,\r\n    deployedNetwork && deployedNetwork.address\r\n  );\r\n\r\n  // put state data into the REDUX store for easy access from other pages and components\r\n\r\n  let data = {\r\n    taxChainContract: instance,\r\n    userAddress,    // shorthand\r\n  };\r\n\r\n  store.dispatch(blockchainInitialized(data));\r\n\r\n  return data;\r\n}\r\n\r\nexport default initBlockchain;\r\n","\r\nasync function getMessageSenderTypeFunc(taxChainContract, msgSenderAddress) {\r\n    const res = await taxChainContract.methods.getMessageSenderAddressType()\r\n                .call({from: msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nasync function registerNewUserFunc(taxChainContract, userAddress,  userType, msgSenderAddress) {\r\n    if(userType === 'employee') {\r\n        await taxChainContract.methods.registerEmployee(userAddress)\r\n        .send({from: msgSenderAddress});\r\n    }\r\n    else if(userType === 'employer') {\r\n        await taxChainContract.methods.registerEmployer(userAddress)\r\n        .send({from: msgSenderAddress});\r\n    }\r\n}\r\n\r\nasync function getSalaryAmountsForEmployeeAndMonthAndYearFunc(taxChainContract, userAddress, month, year, msgSenderAddress) {\r\n    const res = await taxChainContract.methods.getSalaryAmountsForEmployeeAndMonthAndYear(userAddress, month, year)\r\n                .call({from: msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nasync function getEmployeeTotalIncomeAYearFunc(taxChainContract, userAddress, year, msgSenderAddress) {\r\n    const res = await taxChainContract.methods.getEmployeeTotalIncomeAYear(userAddress, year)\r\n                .call({from: msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nasync function getTaxRateFunc(taxChainContract) {\r\n    const res = await taxChainContract.methods.getTaxRate().call();\r\n    return res;\r\n}\r\n\r\nasync function getEmployerIdsForEmployeeAndMonthAndYearFunc(taxChainContract, userAddress, month, year, msgSenderAddress) {\r\n    const res = await taxChainContract.methods.getEmployerIdsForEmployeeAndMonthAndYear(userAddress, month, year)\r\n                .call({from: msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nasync function employeeAcceptEmployerFunc(taxChainContract, employeeAddress, employerAddress, msgSenderAddress) {\r\n    const res = await taxChainContract.methods.employeeAcceptEmployer(employeeAddress, employerAddress)\r\n                .send({from: msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nasync function getAllEmployeeFunc(taxChainContract, msgSenderAddress){\r\n    const res = await taxChainContract.methods.getAllEmployeeList()\r\n                .call({from:msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nasync function getAllEmployerFunc(taxChainContract, msgSenderAddress){\r\n    const res = await taxChainContract.methods.getAllEmployerList()\r\n                .call({from:msgSenderAddress});\r\n    return res;\r\n}\r\n\r\n\r\nasync function getEmployeeTotalIncomeFunc(taxChainContract, employeeAddress, year, msgSenderAddress){\r\n    const res = await taxChainContract.methods.getEmployeeTotalIncomeAYear(employeeAddress, year)\r\n                .call({from:msgSenderAddress});\r\n    return res\r\n}\r\n\r\nasync function getAllEmployeeTotalIncomeListFunc(taxChainContract, year, msgSenderAddress){\r\n    const res = await taxChainContract.methods.getAllEmployeeTotalIncomeListAYear(year)\r\n                .call({from:msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nasync function changeIRSTaxRateFunc(taxChainContract, msgSenderAddress, newTaxRate){\r\n    const res = await taxChainContract.methods.changeTaxRate(newTaxRate)\r\n                .send({from:msgSenderAddress});\r\n    return res;\r\n}\r\n\r\n\r\n\r\nasync function addEmployeeSalaryFunc(taxChainContract, employeeAddress, employerAddress, year, month, amount, msgSenderAddress) {\r\n    const res = await taxChainContract.methods.addEmployeeSalary(employeeAddress, employerAddress, year, month, amount)\r\n                .send({from: msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nasync function registerIrsAccountFunc(taxChainContract, msgSenderAddress, irsAccount) {\r\n    const res = await taxChainContract.methods.registerIRS(irsAccount)\r\n                .send({from: msgSenderAddress});\r\n    return res;\r\n}\r\n\r\nexport const getMessageSenderType=getMessageSenderTypeFunc;\r\nexport const registerNewUser=registerNewUserFunc;\r\nexport const getSalaryAmountsForEmployeeAndMonthAndYear=getSalaryAmountsForEmployeeAndMonthAndYearFunc;\r\nexport const getAllEmployee=getAllEmployeeFunc;\r\nexport const getAllEmployer=getAllEmployerFunc;\r\nexport const getEmployeeTotalIncomeAYear=getEmployeeTotalIncomeAYearFunc;\r\nexport const getAllEmployeeTotalIncomeList=getAllEmployeeTotalIncomeListFunc;\r\nexport const getTaxRate=getTaxRateFunc;\r\nexport const getEmployerIdsForEmployeeAndMonthAndYear=getEmployerIdsForEmployeeAndMonthAndYearFunc;\r\nexport const employeeAcceptEmployer=employeeAcceptEmployerFunc;\r\nexport const changeIRSTaxRate=changeIRSTaxRateFunc;\r\nexport const addEmployeeSalary=addEmployeeSalaryFunc;\r\nexport const registerIrsAccount=registerIrsAccountFunc;\r\n","import React, {Component} from \"react\";\r\nimport {Form, Radio, Button, Icon, Grid, Message, Tab, Statistic, Dropdown, Segment, Table, Image, Dimmer, Loader} from 'semantic-ui-react';\r\nimport {registerNewUser, getTaxRate, getAllEmployeeTotalIncomeList, getAllEmployee} from \"../common/contractMethods\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Register extends Component {\r\n    state = {\r\n        selectedType : \"employee\",\r\n        registerMessageVisible : true,\r\n        errorMessage: \"\",\r\n        doButtonLoading: false,\r\n        allSalaries: [],\r\n        allEmployeeIds: [],\r\n        employeeTaxTableBody : \"\",\r\n        allSalaryLoadingFinished: true,\r\n        taxRate : 0,\r\n        totalTax : 0,\r\n        salaryYear : 2020\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // let salary = await getAllEmployeeTotalIncomeList(this.props.taxChainContract, 2020,  this.props.userAddress);\r\n        // let taxRate = await getTaxRate(this.props.taxChainContract);\r\n        // let allSalary = salary.map(Number);\r\n        // let totalCollectedTax = (allSalary.reduce((a,b) => a+b, 0))  * (taxRate/100);\r\n        // this.setState({\r\n        //     salaries:salary,\r\n        //     taxRate:taxRate\r\n        // });\r\n    }\r\n\r\n    handleRadioChange = (e, { value }) => this.setState({ selectedType:value })\r\n    handleRegisterMessageDismiss = () => {\r\n        this.setState({ registerMessageVisible: false });\r\n    }\r\n    getSuccessfulRegistrationMessage = () => {\r\n        return (\r\n        <Message success\r\n            icon='check'\r\n            header=\"You have been successfully registered\"\r\n            content=''\r\n            size=\"small\"\r\n        />);\r\n    }\r\n\r\n    getFailedRegistrationMessage = (err) => {\r\n        return (\r\n            <Message negative\r\n                    icon='times'\r\n                    header='Sorry. Some error happened'\r\n                    content={err.message}\r\n                    size=\"small\"\r\n            />\r\n        );\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        try {\r\n            this.setState({doButtonLoading: true});\r\n            await registerNewUser(this.props.taxChainContract, this.props.userAddress, this.state.selectedType, this.props.userAddress);\r\n            this.setState({\r\n                errorMessage: this.getSuccessfulRegistrationMessage(),\r\n                doButtonLoading: false\r\n            })\r\n            setTimeout(() => {\r\n                window.location.reload();\r\n            }, 1500);\r\n        } catch(err) {\r\n            console.log(err);\r\n            this.setState({\r\n                errorMessage: this.getFailedRegistrationMessage(err),\r\n                doButtonLoading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    getRegistrationPane = () => {\r\n        let registerMessage = \"\";\r\n        if(this.state.registerMessageVisible)\r\n        {\r\n            registerMessage =\r\n                <Message warning\r\n                         icon='exclamation triangle'\r\n                         header='You are not registered in our system'\r\n                         content='Please register to continue'\r\n                         color=\"teal\"\r\n                         size=\"small\"\r\n                         onDismiss={this.handleRegisterMessageDismiss}\r\n                />\r\n        }\r\n        let registrationPaneContent = (\r\n            <Grid centered columns={1}>\r\n                <Grid.Row>\r\n                    {registerMessage}\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    {this.state.errorMessage}\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Field>\r\n                            I am an:\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                                label='Employee'\r\n                                name='employee'\r\n                                value='employee'\r\n                                checked={this.state.selectedType === 'employee'}\r\n                                onChange={this.handleRadioChange}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                                label='Employer'\r\n                                name='employer'\r\n                                value='employer'\r\n                                checked={this.state.selectedType === 'employer'}\r\n                                onChange={this.handleRadioChange}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Button animated loading={this.state.doButtonLoading}>\r\n                            <Button.Content visible>Register</Button.Content>\r\n                            <Button.Content hidden>\r\n                                <Icon fitted size=\"large\" name='user plus' />\r\n                            </Button.Content>\r\n                        </Form.Button>\r\n                    </Form>\r\n                </Grid.Row>\r\n            </Grid>\r\n        );\r\n        let paneName = \"Registration\";\r\n        return {\r\n            menuItem: paneName,\r\n            render: () => <Tab.Pane>{registrationPaneContent}</Tab.Pane>\r\n        }\r\n    }\r\n\r\n    getYearOptions = () => {\r\n        let yearOptions = [];\r\n        for (let y = 2020; y <= 2120; y++) {\r\n            yearOptions.push({\r\n                key: y,\r\n                text: y,\r\n                value: y\r\n            });\r\n        }\r\n        return yearOptions;\r\n    }\r\n\r\n    getAllEmployeeTaxHeader = () => {\r\n        return (\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Employee Id</Table.HeaderCell>\r\n                    <Table.HeaderCell textAlign='right'>Salary Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell textAlign='right'>Income Tax Amount</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n        );\r\n    }\r\n    getAllEmployeeTaxBody = () => {\r\n        let rows = []\r\n        for(let index = 0;index<this.state.allSalaries.length;index++)\r\n            rows.push(this.getOneEmployeeTaxBody(index))\r\n        return rows\r\n    }\r\n    getOneEmployeeTaxBody = (index) => {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell>{this.state.allEmployeeIds[index]}</Table.Cell>\r\n                <Table.Cell textAlign='right'>${this.state.allSalaries[index]}</Table.Cell>\r\n                <Table.Cell textAlign='right'>${this.calculateTax(this.state.allSalaries[index])}</Table.Cell>\r\n            </Table.Row>\r\n        );\r\n    }\r\n\r\n    calculateTax = (salary) => {\r\n        return salary * this.state.taxRate/100.0;\r\n    }\r\n\r\n    changeYear = async (event, {value}) => {\r\n        this.setState({allSalaryLoadingFinished: false});\r\n        let salary = await getAllEmployeeTotalIncomeList(this.props.taxChainContract, value,  this.props.userAddress);\r\n        let taxRate_ = await getTaxRate(this.props.taxChainContract);\r\n        let allSalary = salary.map(Number);\r\n        let totalCollectedTax = (allSalary.reduce((a,b) => a+b, 0))  * (taxRate_/100.0);\r\n        let employeeIds = await getAllEmployee(this.props.taxChainContract, this.props.userAddress)\r\n        await this.setState({\r\n            totalTax:totalCollectedTax,\r\n            allSalaries: allSalary,\r\n            allEmployeeIds: employeeIds,\r\n            taxRate: taxRate_\r\n        });\r\n        this.setState({\r\n            employeeTaxTableBody: this.getAllEmployeeTaxBody(),\r\n        })\r\n        setTimeout(()=>{\r\n            this.setState({allSalaryLoadingFinished: true});   \r\n        }, 500);\r\n    }\r\n\r\n\r\n\r\n    getTotalTaxPane = () => {\r\n        let yearOptions = this.getYearOptions();\r\n        let header = this.getAllEmployeeTaxHeader()\r\n        let body = this.state.employeeTaxTableBody;\r\n        \r\n       let totalTaxPaneContent = (\r\n           <div>\r\n           <Segment>\r\n               <span>Select Year</span>\r\n               <Dropdown\r\n                   placeholder='Select Year'\r\n                   fluid\r\n                   selection\r\n                   options={yearOptions}\r\n                   onChange={this.changeYear}\r\n               />\r\n           </Segment>\r\n           <Segment>\r\n                <Statistic.Group widths='two'>\r\n                    <Statistic>\r\n                        <Statistic.Value>\r\n                            <Icon name=\"dollar\" />{this.state.totalTax}\r\n                        </Statistic.Value>\r\n                        <Statistic.Label>Total Collection</Statistic.Label>\r\n                    </Statistic>\r\n                    <Statistic>\r\n                        <Statistic.Value>\r\n                            <Icon name=\"users\" /> {this.state.allSalaries.length}\r\n                        </Statistic.Value>\r\n                        <Statistic.Label>Number of employees</Statistic.Label>\r\n                    </Statistic>\r\n                </Statistic.Group>\r\n                <Table compact selectable>\r\n                    {header}\r\n                    <Table.Body>\r\n                        {body}\r\n                    </Table.Body>\r\n                </Table>\r\n                <Dimmer active={!this.state.allSalaryLoadingFinished} inverted>\r\n                    <Loader inverted active={!this.state.allSalaryLoadingFinished}>Loading</Loader>\r\n                </Dimmer>\r\n\r\n                <Image hidden={this.state.allSalaryLoadingFinished} src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\r\n           </Segment>\r\n           </div>\r\n       );\r\n        let paneName = \"Total tax collection\";\r\n        return {\r\n            menuItem: paneName,\r\n            render: () => <Tab.Pane>{totalTaxPaneContent}</Tab.Pane>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let allPanes = [\r\n            this.getRegistrationPane(),\r\n            this.getTotalTaxPane()\r\n        ];\r\n        return (\r\n            <div>\r\n                <Tab panes={allPanes} renderActiveOnly={true} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        taxChainContract: state.taxChainContract,\r\n        userAddress: state.userAddress,\r\n        userType: state.userType,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Register);","\r\nimport React from \"react\";\r\nimport {Message} from \"semantic-ui-react\";\r\n\r\nfunction getFailedMessageFunc(err) {\r\n    return (\r\n        <Message negative\r\n            icon='times'\r\n            header='Sorry. Some error happened'\r\n            content={err.message}\r\n            size=\"small\"\r\n        />\r\n    );\r\n}\r\n\r\nexport const getFailedMessage=getFailedMessageFunc;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getSalaryAmountsForEmployeeAndMonthAndYear, getEmployeeTotalIncomeAYear, getTaxRate, getEmployerIdsForEmployeeAndMonthAndYear, employeeAcceptEmployer } from \"../common/contractMethods\";\r\nimport { Table, Dropdown, Segment, Dimmer, Loader, Image, Icon, Statistic, Tab, Form, Message, Button, Modal, Header } from \"semantic-ui-react\";\r\nimport { getFailedMessage } from \"../common/commonMethods\";\r\n\r\n\r\nclass Employee extends Component {\r\n    state = {\r\n        monthlySalaries: [],\r\n        employersIds: [],\r\n        totalSalary: 0,\r\n        totalTax: 0,\r\n        incomeTaxRate: 0,\r\n        loadingFinished: false,\r\n        errorMessage: \"\",\r\n\r\n        panes: [],\r\n        acceptEmployerMessage: \"\",\r\n        showAcceptEmployerMessage: false,\r\n        doAcceptButtonLoading: false,\r\n        submittedEmployerAddressToAccept: \"\",\r\n        errorHappendedToAcceptEmployer: false,\r\n\r\n        newSalaryModalOpen: false,\r\n        newSalaryAmount: 0,\r\n        newSalaryMonth: 1,\r\n        newSalaryYear: 1,\r\n        newSalaryEmployerId: \"\",\r\n\r\n        salaryYear: 2020,\r\n        salaryYearSet: false\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({\r\n            loadingFinished: true\r\n        });\r\n    }\r\n\r\n    downloadData = async() => {\r\n        this.setState({\r\n            loadingFinished: false\r\n        });\r\n        await this.setEmployerIds();\r\n        await this.setTotalSalary();\r\n        await this.setMonthlySalaryAmounts();\r\n        await this.setTotalTax();\r\n        this.listenSalaryAddedEvent();\r\n        setTimeout(() => {\r\n            this.setState({ loadingFinished: true });\r\n        }, 300);\r\n    }\r\n\r\n    setEmployerIds = async () => {\r\n        if(this.state.salaryYearSet === false)\r\n            return;\r\n        let month = 1;\r\n        let allResults = [];\r\n        try {\r\n            for (month = 1; month <= 12; month++) {\r\n                let result = await getEmployerIdsForEmployeeAndMonthAndYear(this.props.taxChainContract, this.props.userAddress,\r\n                    month, this.state.salaryYear, this.props.userAddress);\r\n                allResults.push(result);\r\n            }\r\n            this.setState({ employersIds: allResults });\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.setState({ errorMessage: getFailedMessage(err) });\r\n        }\r\n    }\r\n\r\n    setMonthlySalaryAmounts = async () => {\r\n        if(this.state.salaryYearSet === false)\r\n            return;\r\n        let month = 1;\r\n        let allResults = [];\r\n        try {\r\n            for (month = 1; month <= 12; month++) {\r\n                let result = await getSalaryAmountsForEmployeeAndMonthAndYear(this.props.taxChainContract, this.props.userAddress,\r\n                    month, this.state.salaryYear, this.props.userAddress);\r\n                allResults.push(result);\r\n            }\r\n            this.setState({ monthlySalaries: allResults });\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.setState({ errorMessage: getFailedMessage(err) });\r\n        }\r\n    }\r\n\r\n    getTableHeader = () => {\r\n        return (\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Month</Table.HeaderCell>\r\n                    <Table.HeaderCell>Employer</Table.HeaderCell>\r\n                    <Table.HeaderCell textAlign='right'>Salary Amount</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n        );\r\n    }\r\n\r\n    getMonthNameFromNumber = (monthNum) => {\r\n        let monthNames = [\"January\", \"February\", \"March\", \"April\",\r\n            \"May\", \"June\", \"July\", \"August\", \"September\",\r\n            \"October\", \"November\", \"December\"];\r\n        return monthNames[monthNum];\r\n    }\r\n\r\n    getTableRow = (month, employerId, salary) => {\r\n        return (\r\n            <Table.Row>\r\n                <Table.Cell>{this.getMonthNameFromNumber(month)}</Table.Cell>\r\n                <Table.Cell>{employerId}</Table.Cell>\r\n                <Table.Cell textAlign='right'>{salary}</Table.Cell>\r\n            </Table.Row>\r\n        );\r\n    }\r\n    getTableBody = () => {\r\n        if(this.state.salaryYearSet === false)\r\n            return;\r\n\r\n        let bodies = [];\r\n        let monthlySalaries = this.state.monthlySalaries;\r\n        let employerIds = this.state.employersIds;\r\n        let employerId, salary;\r\n        for (let month = 0; month < 12; month++) {\r\n            if (monthlySalaries[month] === undefined || monthlySalaries[month].length === 0)\r\n                continue;\r\n            for (let emplr = 0; emplr < monthlySalaries[month].length; emplr++) {\r\n                if (employerIds.length === 0 || employerIds[month] === undefined || employerIds[month].length === 0)\r\n                    employerId = \"Not loaded yet\";\r\n                else\r\n                    employerId = this.state.employersIds[month][emplr];\r\n                salary = monthlySalaries[month][emplr];\r\n                bodies.push(this.getTableRow(month, employerId, salary));\r\n            }\r\n        }\r\n        return bodies;\r\n    }\r\n\r\n    getTableFooter = () => {\r\n        return (\r\n            <Table.Footer>\r\n                <Table.Row>\r\n                    <Table.HeaderCell />\r\n                    <Table.HeaderCell />\r\n                    <Table.HeaderCell textAlign='right'><b>Total: ${this.state.totalSalary} </b></Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Footer>\r\n        );\r\n    }\r\n\r\n    setTotalSalary = async () => {\r\n        if(this.state.salaryYearSet === false)\r\n            return;\r\n        let income = await getEmployeeTotalIncomeAYear(this.props.taxChainContract, this.props.userAddress, this.state.salaryYear, this.props.userAddress);\r\n        this.setState({ totalSalary: income });\r\n    }\r\n\r\n    setTotalTax = async () => {\r\n        if(this.state.salaryYearSet === false)\r\n            return;\r\n        let taxRate = await getTaxRate(this.props.taxChainContract);\r\n\r\n        this.setState({\r\n            totalTax: this.state.totalSalary * taxRate / 100.0,\r\n            incomeTaxRate: taxRate,\r\n        });\r\n    }\r\n\r\n    getYearOptions = () => {\r\n        let yearOptions = [];\r\n        for (let y = 2020; y <= 2120; y++) {\r\n            yearOptions.push({\r\n                key: y,\r\n                text: y,\r\n                value: y\r\n            });\r\n        }\r\n        return yearOptions;\r\n    }\r\n\r\n    changeYear = async(event, {value}) => {\r\n        await this.setState({\r\n            salaryYear: value,\r\n            salaryYearSet: true\r\n        });\r\n        await this.downloadData();\r\n    }\r\n\r\n    getSalaryPan = () => {\r\n        let header = \"\", body = \"\", footer = \"\";\r\n        try {\r\n            header = this.getTableHeader();\r\n            body = this.getTableBody();\r\n            footer = this.getTableFooter();\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.setState({ errorMessage: getFailedMessage(err) });\r\n        }\r\n        let yearOptions = this.getYearOptions();\r\n        let paneContent = (\r\n            <div>\r\n                <Segment hidden={this.state.errorMessage === \"\"}>\r\n                    {this.state.errorMessage}\r\n                </Segment>\r\n                <Segment>\r\n                    <span>Select Year</span>\r\n                    <Dropdown\r\n                        placeholder='Select Year'\r\n                        fluid\r\n                        selection\r\n                        options={yearOptions}\r\n                        onChange={this.changeYear}\r\n                    />\r\n                </Segment>\r\n                <Segment>\r\n                    <Statistic.Group widths='three'>\r\n                        <Statistic>\r\n                            <Statistic.Value>\r\n                                <Icon name=\"dollar\" />{this.state.totalSalary}\r\n                            </Statistic.Value>\r\n                            <Statistic.Label>Total Income</Statistic.Label>\r\n                        </Statistic>\r\n                        <Statistic>\r\n                            <Statistic.Value>\r\n                                <Icon name=\"percent\" />{this.state.incomeTaxRate}\r\n                            </Statistic.Value>\r\n                            <Statistic.Label>Income Tax Rate</Statistic.Label>\r\n                        </Statistic>\r\n\r\n                        <Statistic>\r\n                            <Statistic.Value>\r\n                                <Icon name=\"dollar\" />{this.state.totalTax}\r\n                            </Statistic.Value>\r\n                            <Statistic.Label>Total Income Tax</Statistic.Label>\r\n                        </Statistic>\r\n                    </Statistic.Group>\r\n                </Segment>\r\n                <Dimmer active={!this.state.loadingFinished} inverted>\r\n                    <Loader inverted active={!this.state.loadingFinished}>Loading</Loader>\r\n                </Dimmer>\r\n\r\n                <Image hidden={this.state.loadingFinished} src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\r\n\r\n                <Table compact selectable>\r\n                    {header}\r\n                    <Table.Body>\r\n                        {body}\r\n                    </Table.Body>\r\n                    {footer}\r\n                </Table>\r\n            </div>\r\n        );\r\n        let paneName = 'Tax Information';\r\n\r\n        return {\r\n            menuItem: paneName,\r\n            render: () => <Tab.Pane>{paneContent}</Tab.Pane>\r\n        }\r\n    }\r\n\r\n    handleAcceptEmployerAddressValue = (e, { name, value }) => {\r\n        this.setState({ submittedEmployerAddressToAccept: value });\r\n    }\r\n\r\n    handleAcceptEmployerSubmit = async () => {\r\n        this.setState({ doAcceptButtonLoading: true });\r\n        try {\r\n            const result = await employeeAcceptEmployer(this.props.taxChainContract, this.props.userAddress,\r\n                this.state.submittedEmployerAddressToAccept, this.props.userAddress);\r\n            this.setState({\r\n                acceptEmployerMessage: \"Employer successfully accepted\",\r\n                errorHappendedToAcceptEmployer: false,\r\n                doAcceptButtonLoading: false\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.setState({\r\n                acceptEmployerMessage: err.message,\r\n                errorHappendedToAcceptEmployer: true,\r\n                doAcceptButtonLoading: false\r\n            });\r\n        }\r\n        this.setState({\r\n            showAcceptEmployerMessage: true,\r\n            submittedEmployerAddressToAccept: \"\"\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this.setState({ showAcceptEmployerMessage: false })\r\n        }, 10000);\r\n    }\r\n\r\n    getEmployerAcceptPan = () => {\r\n        let employerPaneContent = (\r\n            <Segment>\r\n                <Message\r\n                    hidden={!this.state.showAcceptEmployerMessage}\r\n                    negative={!this.state.errorHappendedToAcceptEmployer}\r\n                    success={this.state.errorHappendedToAcceptEmployer}\r\n                    icon={this.state.errorHappendedToAcceptEmployer ? 'times' : 'check'}\r\n                    header={this.state.errorHappendedToAcceptEmployer ? 'Error!!' : 'Success!!'}\r\n                    content={this.state.acceptEmployerMessage}\r\n                    size=\"small\"\r\n                />\r\n                <Form onSubmit={this.handleAcceptEmployerSubmit}>\r\n                    <Form.Input required\r\n                        label='Enter the Employer ID to accpet salary'\r\n                        placeholder='0xFb3a0F9e5C1B684cc54d7EF2a052231E8e54Bf19'\r\n                        value={this.state.submittedEmployerAddressToAccept}\r\n                        onChange={this.handleAcceptEmployerAddressValue}\r\n                    />\r\n                    <Form.Button animated loading={this.state.doAcceptButtonLoading}>\r\n                        <Button.Content visible>Accept</Button.Content>\r\n                        <Button.Content hidden>\r\n                            <Icon fitted size=\"large\" name='user plus' />\r\n                        </Button.Content>\r\n                    </Form.Button>\r\n                </Form>\r\n            </Segment>\r\n        );\r\n        let paneName = \"Accept Employer\";\r\n        return {\r\n            menuItem: paneName,\r\n            render: () => <Tab.Pane>{employerPaneContent}</Tab.Pane>\r\n        }\r\n    }\r\n\r\n    listenSalaryAddedEvent = () => {\r\n        let event = this.props.salaryAddedEvent({\r\n            employeeId: this.props.userAddress,\r\n            year: this.state.salaryYear\r\n        }, (err, result) => {\r\n            // console.log(\"found event\", result)\r\n            if (err) {\r\n                console.log(\"Error happened while litening to event\", err);\r\n                return;\r\n            }\r\n            let amount = result.returnValues.amount;\r\n            let employerId = result.returnValues.employerId;\r\n            let employeeId = result.returnValues.employeeId;\r\n            let month = result.returnValues.month;\r\n            let year = result.returnValues.year;\r\n            // console.log(\"got new salary\", amount, employeeId, month, result);\r\n            // console.log(\"user address\", this.props.userAddress, \"sal year\", this.state.salaryYear)\r\n            if (employeeId != this.props.userAddress || year != this.state.salaryYear)\r\n                return;\r\n            // console.log(\"got here\")\r\n            this.addNewSalaryAfterEvent(amount, employerId, month, year);\r\n        });\r\n    }\r\n\r\n    addNewSalaryAfterEvent = (amount, employerId, month, year) => {\r\n        let monthlySalariesVar = this.state.monthlySalaries;\r\n        monthlySalariesVar[month - 1].push(amount);\r\n        let employersIdsVar = this.state.employersIds;\r\n        employersIdsVar[month - 1].push(employerId);\r\n        this.setState({\r\n            monthlySalaries: monthlySalariesVar,\r\n            employersIds: employersIdsVar,\r\n            newSalaryAmount: amount,\r\n            newSalaryEmployerId: employerId,\r\n            newSalaryMonth: month - 1,\r\n            newSalaryYear: year,\r\n            newSalaryModalOpen: true\r\n        });\r\n    }\r\n\r\n    closeSalaryReceivedModal = () => {\r\n        this.setState({ newSalaryModalOpen: false });\r\n    }\r\n\r\n    getSalaryRecievedPopUp = () => {\r\n        return (\r\n            <Modal\r\n                open={this.state.newSalaryModalOpen}\r\n                onClose={this.closeSalaryReceivedModal}\r\n                basic size='small'>\r\n                <Header icon='money bill alternate outline' content='Paycheck received' />\r\n                <Modal.Content>\r\n                    <p>\r\n                        You received a paycheck of amount ${this.state.newSalaryAmount} from {' '}\r\n                        {this.state.newSalaryEmployerId} for the month of {' '}\r\n                        {this.getMonthNameFromNumber(this.state.newSalaryMonth)}, {' '}\r\n                        {this.state.newSalaryYear}.\r\n                    </p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button color='green' onClick={this.closeSalaryReceivedModal}>\r\n                        <Icon name='checkmark' /> Yay!!\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let allPanes = [\r\n            this.getSalaryPan(),\r\n            this.getEmployerAcceptPan()\r\n        ];\r\n        return (\r\n            <div>\r\n                {this.getSalaryRecievedPopUp()}\r\n                <Tab panes={allPanes} renderActiveOnly={true} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        taxChainContract: state.taxChainContract,\r\n        userAddress: state.userAddress,\r\n        salaryAddedEvent: state.taxChainContract.events.SalaryAdded,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Employee);\r\n","import React, {Component} from 'react'\r\nimport { Image } from 'semantic-ui-react'\r\n\r\nclass EmployeePopup extends Component {\r\n    state = {\r\n      date : new Date(),\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <row className='modal'>\r\n            <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\r\n              <Image eight=\"250\" width=\"250\" src='https://react.semantic-ui.com/images/avatar/large/elliot.jpg' wrapped ui={false} />\r\n            </div>\r\n            <div>\r\n              <br/>\r\n              <b>  Address: </b>{this.props.employeeInfo.employeeAddr}<br/>\r\n              <b>  Salary received: </b>${this.props.employeeInfo.annualTax}<br/>\r\n              <b>  Tax Amount: </b>${Math.round(this.props.employeeInfo.currentMonthlyTax*this.state.date.getMonth()*10)/10}<br/>\r\n              <b>  Tax Rate: </b>{this.props.employeeInfo.employeeTaxRate}%<br/>\r\n            </div>\r\n          </row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EmployeePopup;\r\n","import React, {Component} from 'react'\r\nimport { Card, Image } from 'semantic-ui-react'\r\nimport Popup from \"reactjs-popup\";\r\nimport EmployeePopup from \"../components/employeePopup\";\r\n\r\n//Card for employee that have address and salary display with image avatar\r\n\r\nclass EmployeeCard extends Component {\r\n    state = {\r\n      employeeAddr : this.props.addr,\r\n      employeeSalary : this.props.salary,\r\n      employeeTaxRate : this.props.taxRate,\r\n      date : new Date(),\r\n      annualTax : Math.round(this.props.salary*(this.props.taxRate/100)*10)/10,\r\n      currentMonthlyTax : this.props.salary*(this.props.taxRate/100)/12,\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{fontSize: 11,}}>\r\n                <Image src='https://react.semantic-ui.com/images/avatar/large/elliot.jpg' wrapped ui={false} />\r\n                <Card.Content>\r\n                    <Card.Header>Address</Card.Header>\r\n                    <Card.Meta>\r\n                        <span className='date' class=\"limit\">{this.state.employeeAddr}</span>\r\n                    </Card.Meta>\r\n                    <Card.Description>\r\n                        <div><b>Salary : </b>${this.state.employeeSalary}</div>\r\n                        <div><b>Annual Tax Amount : </b>${this.state.annualTax}</div>\r\n                        <div><b>Current Tax Amount : </b>${Math.round(this.state.currentMonthlyTax*this.state.date.getMonth()*10)/10}</div>\r\n                        <Popup trigger={<button> More Employee Info</button>} modal closeOnDocumentClick>\r\n                          <EmployeePopup employeeInfo={this.state} />\r\n                        </Popup>\r\n                    </Card.Description>\r\n                </Card.Content>\r\n                {/*<Card.Content extra>*/}\r\n                {/*    <a>*/}\r\n                {/*        <Icon name='user' />*/}\r\n                {/*        22 Friends*/}\r\n                {/*    </a>*/}\r\n                {/*</Card.Content>*/}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EmployeeCard\r\n","import React, {Component} from 'react'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport Popup from \"reactjs-popup\";\r\n// import EmployeePopup from \"../components/employeePopup\";\r\n\r\nclass EmployerCard extends Component {\r\n    state = {\r\n      employerAddr : this.props.addr,\r\n    //   employeeSalary : this.props.salary,\r\n    //   employeeTaxRate : this.props.taxRate,\r\n    //   date : new Date(),\r\n    //   annualTax : Math.round(this.props.salary*(this.props.taxRate/100)*10)/10,\r\n    //   currentMonthlyTax : this.props.salary*(this.props.taxRate/100)/12,\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{fontSize: 11,}}>\r\n                <Image src='https://img.icons8.com/bubbles/150/000000/company.png' wrapped ui={false} />\r\n                <Card.Content>\r\n                    <Card.Header>Address</Card.Header>\r\n                    <Card.Meta>\r\n                        <span className='date' class=\"limit\">{this.state.employerAddr}</span>\r\n                    </Card.Meta>\r\n                    <Card.Description>\r\n                        {/* <div><b>Salary : </b>${this.state.employeeSalary}</div>\r\n                        <div><b>Annual Tax Amount : </b>${this.state.annualTax}</div>\r\n                        <div><b>Current Tax Amount : </b>${Math.round(this.state.currentMonthlyTax*this.state.date.getMonth()*10)/10}</div>\r\n                        <Popup trigger={<button> More Employee Info</button>} modal closeOnDocumentClick>\r\n                          <EmployeePopup employeeInfo={this.state} />\r\n                        </Popup> */}\r\n                    </Card.Description>\r\n                </Card.Content>\r\n                {/*<Card.Content extra>*/}\r\n                {/*    <a>*/}\r\n                {/*        <Icon name='user' />*/}\r\n                {/*        22 Friends*/}\r\n                {/*    </a>*/}\r\n                {/*</Card.Content>*/}\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EmployerCard\r\n","import React, {Component} from 'react'\r\nimport {changeIRSTaxRate} from \"../common/contractMethods\";\r\nimport { Button, Icon, Form, Message } from \"semantic-ui-react\";\r\n\r\n\r\nclass changeTaxRate extends Component {\r\n\r\n  state = {\r\n    value: \"\",\r\n    message: \"\",\r\n    errorMessage: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  onSubmit = async event => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      loading: true,\r\n      errorMessage: \"\",\r\n      message: \"waiting for blockchain transaction to complete...\"\r\n    });\r\n    try {\r\n      await changeIRSTaxRate(this.props.taxChainContract, this.props.userAddress, this.state.value);\r\n      this.setState({\r\n        loading: false,\r\n        message: \"New Tax Rate has been set for all employees.\"\r\n      });\r\n    } catch (err) {\r\n      this.setState({\r\n        loading: false,\r\n        errorMessage: err.message,\r\n        message: \"Problem encountered. Unable to change the Tax Rate.\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\r\n          <Form.Field>\r\n            <label>Set New Tax Rate</label>\r\n            <input\r\n              placeholder=\"Tax Percentage (0 - 100%)\"\r\n              onChange={event =>\r\n                this.setState({\r\n                  value: event.target.value\r\n                })\r\n              }\r\n            />\r\n          </Form.Field>\r\n\r\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n          <Button primary type=\"submit\" loading={this.state.loading}>\r\n            <Icon name=\"check\" />\r\n            Change Tax Rate\r\n          </Button>\r\n          <h2>{this.state.message}</h2>\r\n        </Form>\r\n    );\r\n  }\r\n}\r\nexport default changeTaxRate\r\n","import React, {Component} from 'react'\r\nimport {registerIrsAccount} from \"../common/contractMethods\";\r\nimport { Button, Icon, Form, Message } from \"semantic-ui-react\";\r\n\r\n\r\nclass changeTaxRate extends Component {\r\n\r\n  state = {\r\n    value: \"\",\r\n    message: \"\",\r\n    errorMessage: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  onSubmit = async event => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      loading: true,\r\n      errorMessage: \"\",\r\n      message: \"waiting for blockchain transaction to complete...\"\r\n    });\r\n    try {\r\n      await registerIrsAccount(this.props.taxChainContract, this.props.userAddress, this.state.value);\r\n      this.setState({\r\n        loading: false,\r\n        message: \"New IRS account added.\"\r\n      });\r\n    } catch (err) {\r\n      this.setState({\r\n        loading: false,\r\n        errorMessage: err.message,\r\n        message: \"Problem encountered. Unable to add IRS account.\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\r\n          <Form.Field>\r\n            <label>Add new IRS account</label>\r\n            <input\r\n              placeholder=\"0xc11111FB0Bc6F0AB969E3881A610430780C11a1\"\r\n              onChange={event =>\r\n                this.setState({\r\n                  value: event.target.value\r\n                })\r\n              }\r\n            />\r\n          </Form.Field>\r\n\r\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n          <Button primary type=\"submit\" loading={this.state.loading}>\r\n            <Icon name=\"check\" />\r\n            Add IRS account\r\n          </Button>\r\n          <h2>{this.state.message}</h2>\r\n        </Form>\r\n    );\r\n  }\r\n}\r\nexport default changeTaxRate\r\n","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {changeIRSTaxRate, getTaxRate, getAllEmployee, getAllEmployer, getEmployeeTotalIncome, getAllEmployeeTotalIncomeList} from \"../common/contractMethods\";\r\nimport EmployeeCard from \"../components/employeecard\";\r\nimport EmployerCard from \"../components/employercard\"\r\nimport ChangeTaxRate from \"../components/changeTaxRate\";\r\nimport AddIRSAddr from \"../components/addIrsAdd\";\r\nimport { Dropdown, Grid, Segment, Dimmer, Loader, Image, Icon, Statistic, Tab } from \"semantic-ui-react\";\r\n\r\n// TODO: implement employer page & count\r\n// TODO: add page numbers to employees <- can be done though Grid, though haven't been able to get this to work.\r\n// TODO: add employee / employer search option\r\n// TODO: add employee payment tables <- this has also been a pain to get working with a popup\r\n\r\nclass IRS extends Component {\r\n\r\n    state = {\r\n        selectedType : \"irs\",\r\n        registerMessageVisible : true,\r\n        errorMessage: \"\",\r\n        employee:[],\r\n        employer:[],\r\n        salaries : [],\r\n        incomeTaxRate : .1,\r\n        salaryYear : 2020,\r\n        false : false,\r\n        loadingFinished: \"\",\r\n\r\n        totalEmployers : 0,\r\n        totalEmployees : 0,\r\n        totalIncomeTax : 0,\r\n        totalSalaries : 0,\r\n        tabIndex : 1,\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //Get address and salary for all employees when component mount\r\n        try {\r\n            const result = await getAllEmployee(this.props.taxChainContract, this.props.userAddress);\r\n            const salary = await getAllEmployeeTotalIncomeList(this.props.taxChainContract, 2020, this.props.userAddress);\r\n            const employerListResult = await getAllEmployer(this.props.taxChainContract, this.props.userAddress);\r\n            this.setState({\r\n                errorMessage: \"Successfully Retrieved Tax Information\",\r\n                employee: result,\r\n                employer: employerListResult,\r\n                totalEmployees: result.length,\r\n                totalEmployers: employerListResult.length,\r\n                salaries: salary,\r\n            })\r\n\r\n            await this.setTaxRate();\r\n            await this.setTotalIncomeTax();\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.setState({\r\n                errorMessage: \"Failed To Retrieve Tax Information\"\r\n            });\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ loadingFinished: true });\r\n        }, 1000);\r\n    }\r\n\r\n    getYearOptions = () => {\r\n        let yearOptions = [];\r\n        for (let y = 2020; y <= 2120; y++) {\r\n            yearOptions.push({\r\n                key: y,\r\n                text: y,\r\n                value: y\r\n            });\r\n        }\r\n        return yearOptions;\r\n    }\r\n\r\n    changeYear = async(event, {value}) => {\r\n        await this.setState({\r\n            salaryYear: value,\r\n            salaryYearSet: true\r\n        });\r\n        await this.downloadData();\r\n    }\r\n\r\n    downloadData = async() => {\r\n        this.setState({\r\n            loadingFinished: false\r\n        });\r\n        const result = await getAllEmployee(this.props.taxChainContract, this.props.userAddress);\r\n        const salary = await getAllEmployeeTotalIncomeList(this.props.taxChainContract, this.state.salaryYear, this.props.userAddress);\r\n        this.setState({\r\n            employee: result,\r\n            salaries: salary,\r\n        })\r\n        await this.setTotalIncomeTax();\r\n        setTimeout(() => {\r\n            this.setState({ loadingFinished: true });\r\n        }, 300);\r\n\r\n    }\r\n\r\n    setTaxRate = async () => {\r\n        let taxRate = await getTaxRate(this.props.taxChainContract);\r\n\r\n        this.setState({\r\n            incomeTaxRate: taxRate,\r\n        });\r\n    }\r\n\r\n    setTotalIncomeTax = async () => {\r\n        const reducer = (accumulator, currentValue) => accumulator + currentValue;\r\n        let totalSalaries = this.state.salaries.map(Number).reduce(reducer);\r\n        let totalIncomeTax = totalSalaries*this.state.incomeTaxRate/100;\r\n\r\n        this.setState({\r\n            totalIncomeTax: totalIncomeTax,\r\n            totalSalaries: totalSalaries,\r\n        });\r\n    }\r\n\r\n    getOverviewPane = () => {\r\n      let yearOptions = this.getYearOptions();\r\n      let OverviewPane = (\r\n        <div>\r\n        <Segment>\r\n            <span>Select Year</span>\r\n            <Dropdown\r\n                placeholder='2020'\r\n                fluid\r\n                selection\r\n                options={yearOptions}\r\n                onChange={this.changeYear}\r\n            />\r\n        </Segment>\r\n        <Segment>\r\n            <Statistic.Group widths='two'>\r\n\r\n            <Statistic>\r\n                <Statistic.Value>\r\n                    {this.state.totalEmployers}\r\n                </Statistic.Value>\r\n                <Statistic.Label>Total Employers</Statistic.Label>\r\n            </Statistic>\r\n\r\n                <Statistic>\r\n                    <Statistic.Value>\r\n                        {this.state.totalEmployees}\r\n                    </Statistic.Value>\r\n                    <Statistic.Label>Total Employees</Statistic.Label>\r\n                </Statistic>\r\n\r\n            </Statistic.Group>\r\n        </Segment>\r\n\r\n        <Segment>\r\n            <Statistic.Group widths='three'>\r\n\r\n            <Statistic>\r\n                <Statistic.Value>\r\n                    <Icon name=\"dollar\" />{this.state.totalSalaries}\r\n                </Statistic.Value>\r\n                <Statistic.Label>Total Salary Amount</Statistic.Label>\r\n            </Statistic>\r\n\r\n                <Statistic>\r\n                    <Statistic.Value>\r\n                        <Icon name=\"percent\" />{this.state.incomeTaxRate}\r\n                    </Statistic.Value>\r\n                    <Statistic.Label>Income Tax Rate</Statistic.Label>\r\n                </Statistic>\r\n\r\n                <Statistic>\r\n                    <Statistic.Value>\r\n                        <Icon name=\"dollar\" />{this.state.totalIncomeTax}\r\n                    </Statistic.Value>\r\n                    <Statistic.Label>Total Income Tax</Statistic.Label>\r\n                </Statistic>\r\n\r\n            </Statistic.Group>\r\n        </Segment>\r\n\r\n        <Dimmer active={!this.state.loadingFinished} inverted>\r\n            <Loader inverted active={!this.state.loadingFinished}>Loading</Loader>\r\n        </Dimmer>\r\n\r\n        <Image hidden={this.state.loadingFinished} src='https://react.semantic-ui.com/images/wireframe/paragraph.png' />\r\n        </div>\r\n      );\r\n      let paneName = 'Overview';\r\n\r\n      return {\r\n        menuItem: paneName,\r\n        render: () => <Tab.Pane>{OverviewPane}</Tab.Pane>\r\n      }\r\n    }\r\n\r\n    getEmployersPane = () => {\r\n        let employerPane = (\r\n            <div>\r\n              <b>All Employers</b>\r\n              <Grid>\r\n              {\r\n                  //mapping through all employer address from state variable and setting EmployerCard Component for each of these addresses.\r\n                  this.state.employer.map((employerAddress, index) => {\r\n                      return(<Grid.Column width={5} key={employerAddress}><EmployerCard addr={employerAddress}  /></Grid.Column>)\r\n                  })\r\n              }\r\n              </Grid>\r\n            </div>\r\n        );\r\n        let paneName = 'Employers';\r\n  \r\n        return {\r\n          menuItem: paneName,\r\n          render: () => <Tab.Pane>{employerPane}</Tab.Pane>\r\n        }\r\n    }\r\n\r\n\r\n    getEmployeesPane = () => {\r\n      let yearOptions = this.getYearOptions();\r\n      let employeesPane = (\r\n\r\n          <div>\r\n            <b>All Employees</b>\r\n            <Grid >\r\n\r\n            {\r\n                //mapping through all employee address from state variable and setting EmployeeCard Component for each of these addresses.\r\n                this.state.employee.map((employeeAddress, index) => {\r\n                    return(<Grid.Column width={5} key={employeeAddress}><EmployeeCard addr={employeeAddress} salary={this.state.salaries[index]} taxRate={this.state.incomeTaxRate} /></Grid.Column>)\r\n                })\r\n            }\r\n\r\n            </Grid>\r\n          </div>\r\n      );\r\n      let paneName = 'Employees';\r\n\r\n      return {\r\n        menuItem: paneName,\r\n        render: () => <Tab.Pane>{employeesPane}</Tab.Pane>\r\n      }\r\n    }\r\n\r\n    getChangeTaxRatePane = () => {\r\n      let ChangeTaxRatePane = (\r\n            <ChangeTaxRate taxChainContract={this.props.taxChainContract} userAddress={this.props.userAddress} />\r\n      );\r\n      let paneName = 'Change Tax Rate';\r\n\r\n      return {\r\n        menuItem: paneName,\r\n        render: () => <Tab.Pane>{ChangeTaxRatePane}</Tab.Pane>\r\n      }\r\n    }\r\n\r\n    getAddIRSAddrPane = () => {\r\n      let AddIRSAddrPane = (\r\n          <AddIRSAddr taxChainContract={this.props.taxChainContract} userAddress={this.props.userAddress} />\r\n      );\r\n\r\n      let paneName = 'Add New IRS Account';\r\n\r\n      return {\r\n        menuItem: paneName,\r\n        render: () => <Tab.Pane>{AddIRSAddrPane}</Tab.Pane>\r\n      }\r\n    }\r\n\r\n    render() {\r\n        let allPanes = [\r\n            this.getOverviewPane(),\r\n            this.getEmployeesPane(),\r\n            this.getEmployersPane(),\r\n            this.getChangeTaxRatePane(),\r\n            this.getAddIRSAddrPane(),\r\n        ];\r\n        return (\r\n\r\n            <div>\r\n                <Segment hidden={this.state.errorMessage === \"\"}>\r\n                  {this.state.errorMessage}\r\n                </Segment>\r\n                <Tab panes={allPanes} />\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        taxChainContract: state.taxChainContract,\r\n        userAddress: state.userAddress,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(IRS);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Header, Icon, Form, Message, Segment } from \"semantic-ui-react\";\r\nimport { addEmployeeSalary } from \"../common/contractMethods\";\r\n\r\n\r\nconst monthSelection = [\r\n    { key: 'January', text: 'January', value: 1 },\r\n    { key: 'February', text: 'February', value: 2 },\r\n    { key: 'March', text: 'March', value: 3 },\r\n    { key: 'April', text: 'April', value: 4 },\r\n    { key: 'May', text: 'May', value: 5 },\r\n    { key: 'June', text: 'June', value: 6 },\r\n    { key: 'July', text: 'July', value: 7 },\r\n    { key: 'August', text: 'August', value: 8 },\r\n    { key: 'September', text: 'September', value: 9 },\r\n    { key: 'October', text: 'October', value: 10 },\r\n    { key: 'November', text: 'November', value: 11 },\r\n    { key: 'December', text: 'December', value: 12 },\r\n]\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        taxChainContract: state.taxChainContract,\r\n        userAddress: state.userAddress,\r\n    }\r\n}\r\n\r\nclass Employer extends Component {\r\n    state = {\r\n        employeeAddress: \"\",\r\n        salaryAmount: \"\",\r\n        salaryMonth: \"\",\r\n        salaryYear: \"\",\r\n        message: \"\",\r\n        errorMessage: \"\",\r\n        loading: false,\r\n        bottomMsgHidden: true\r\n    };\r\n\r\n    reInintForm = () => {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                employeeAddress: \"\",\r\n                salaryAmount: \"\",\r\n                salaryMonth: \"\",\r\n                salaryYear: \"\",\r\n                message: \"\",\r\n                errorMessage: \"\",\r\n                loading: false,\r\n                bottomMsgHidden: true\r\n            });\r\n        }, 8000);\r\n    }\r\n\r\n    getYearOptions = () => {\r\n        let options = [];\r\n        for (let y = 2020; y <= 2120; y++) {\r\n            options.push({\r\n                key: y,\r\n                text: y,\r\n                value: y\r\n            });\r\n        }\r\n        return options;\r\n    }\r\n\r\n\r\n    onSubmit = async event => {\r\n        // event.preventDefault();\r\n        this.setState({ loading: true, errorMessage: \"\" });\r\n\r\n        try {\r\n            await addEmployeeSalary(this.props.taxChainContract, this.state.employeeAddress, this.props.userAddress, this.state.salaryYear, this.state.salaryMonth, this.state.salaryAmount, this.props.userAddress);\r\n            this.setState({ loading: false, bottomMsgHidden: false, message: \"Employee received the salary\" });\r\n        }\r\n        catch (err) {\r\n            this.setState({ loading: false, errorMessage: err.message});\r\n        }\r\n        this.reInintForm();\r\n    };\r\n\r\n\r\n    handleMonthDropDown = (event, { value }) => {\r\n        this.setState({ salaryMonth: value });\r\n    };\r\n\r\n    handleYearDropDown = (event, { value }) => {\r\n        this.setState({ salaryYear: value });\r\n    }\r\n\r\n    render() {\r\n        let yearOptions = this.getYearOptions();\r\n        return (\r\n            <div>\r\n                <Segment>\r\n                    <Header icon=\"dollar\" content=\" Pay salary to employee\" />\r\n                    <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\r\n                        <Form.Field>\r\n                            <label>Employee Address</label>\r\n                            <input placeholder=\"0xDa9F682EBB68C8aB847131D773CAA3D48B94Cc96\" value={this.state.employeeAddress} required onChange={event => this.setState({ employeeAddress: event.target.value })} />\r\n                            <Form.Group inline>\r\n                                <label>Select month and year</label>\r\n                                <Form.Select fluid required options={monthSelection} value={this.state.salaryMonth} placeholder='Month' onChange={this.handleMonthDropDown} />\r\n                                <label>/</label>\r\n                                <Form.Select fluid required options={yearOptions} value={this.state.salaryYear} placeholder='Year' onChange={this.handleYearDropDown} />\r\n                            </Form.Group>\r\n\r\n                            <label>Salary Amount</label>\r\n                            <input placeholder=\"Salary Amount\" type='number' value={this.state.salaryAmount} onChange={event => this.setState({ salaryAmount: event.target.value })} />\r\n\r\n                        </Form.Field>\r\n\r\n                        <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n\r\n\r\n                        <Form.Button icon labelPosition='right' loading={this.state.loading}>\r\n                            Make Payment\r\n                            <Icon fitted size=\"large\" name='dollar' />\r\n                        </Form.Button>\r\n                    </Form>\r\n                </Segment>\r\n\r\n                <Message success hidden={this.state.bottomMsgHidden}\r\n                    icon='check'\r\n                    header={this.state.message}\r\n                    content=''\r\n                    size=\"small\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Employer);\r\n","import React, {Component} from \"react\";\r\nimport {\r\n    Container,\r\n    Image,\r\n    Menu,\r\n  } from 'semantic-ui-react';\r\n\r\nclass MenuBar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Menu fixed='top' >\r\n                    <Container>\r\n                        <Menu.Item as='a' header>\r\n                        <Image src='TaxChain-Logo-without-text.png' style={{ width:'40px', marginRight: '1.5em' }} />\r\n                        TaxChain\r\n                        </Menu.Item>\r\n                        {/* <Menu.Item as='a'>Home</Menu.Item>\r\n\r\n                        <Dropdown item simple text='Dropdown'>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item>List Item</Dropdown.Item>\r\n                            <Dropdown.Item>List Item</Dropdown.Item>\r\n                            <Dropdown.Divider />\r\n                            <Dropdown.Header>Header Item</Dropdown.Header>\r\n                            <Dropdown.Item>\r\n                            <i className='dropdown icon' />\r\n                            <span className='text'>Submenu</span>\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item>List Item</Dropdown.Item>\r\n                                <Dropdown.Item>List Item</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item>List Item</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                        </Dropdown> */}\r\n                    </Container>\r\n                </Menu>\r\n\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MenuBar;","import React, { Component } from \"react\";\r\nimport getWeb3 from \"./utils/getWeb3\";\r\nimport initBlockchain from \"./utils/initBlockchain\";\r\n\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { Container } from \"semantic-ui-react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./redux/store\";\r\n\r\nimport { getMessageSenderType } from \"./common/contractMethods\";\r\nimport Register from \"./pages/register\";\r\nimport Employee from \"./pages/employee\";\r\nimport IRS from \"./pages/irs\"\r\nimport Employer from \"./pages/employer\";\r\nimport MenuBar from \"./components/menu\";\r\n\r\n//\r\n//  This is the main application page; routing is handled to render other pages in the application\r\n\r\nclass App extends Component {\r\n\t// define a state variable for important connectivity data to the blockchain\r\n\t// this will then be put into the REDUX store for retrieval by other pages\r\n\r\n\r\n\t// **************************************************************************\r\n\t//\r\n\t// React will call this routine only once when App page loads; do initialization here\r\n\t//\r\n\t// **************************************************************************\r\n\r\n\tstate = {\r\n\t\tmsgSenderType: \"\",\r\n\t\tmsgSenderAddress: \"\",\r\n\t\tcontractInstance: null,\r\n\t}\r\n\r\n\tcomponentDidMount = async () => {\r\n\t\ttry {\r\n\t\t\tconst web3 = await getWeb3(); // from utils directory;  connect to metamask\r\n\t\t\tconst data = await initBlockchain(web3);  // get contract instance and user address\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tmsgSenderType: await getMessageSenderType(data.taxChainContract, data.userAddress),\r\n\t\t\t\tcontractInstance: data.taxChainContract,\r\n\t\t\t\tmsgSenderAddress: data.userAddress,\r\n\t\t\t});\r\n\r\n\t\t} catch (error) {\r\n\t\t\t// Catch any errors for any of the above operations.\r\n\t\t\talert(\r\n\t\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`\r\n\t\t\t);\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\t// **************************************************************************\r\n\t//\r\n\t// main render routine for App component;\r\n\t//      contains route info to navigate between pages\r\n\t//\r\n\t// **************************************************************************\r\n\r\n\trender() {\r\n\t\t// let s = await getMessageSenderAddressType()\r\n\t\tlet page = \"No page initialized\";\r\n\t\tif (this.state.msgSenderType === \"NONE\")\r\n\t\t\tpage = <Register />\r\n\t\telse if (this.state.msgSenderType === \"EMPLOYEE\")\r\n\t\t\tpage = <Employee />\r\n\t\telse if (this.state.msgSenderType === \"IRS\")\r\n\t\t\tpage = <IRS />\r\n\t\telse if (this.state.msgSenderType === \"EMPLOYER\")\r\n\t\t\tpage = <Employer />\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<Provider store={store}>\r\n\t\t\t\t<HashRouter>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<MenuBar />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Container style={{ marginTop: '60px' }}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t{page}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</HashRouter>\r\n\t\t\t</Provider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}